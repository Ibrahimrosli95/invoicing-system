name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.3]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: sales_system_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: pdo, pdo_mysql, mbstring, xml, ctype, json, openssl, zip, dom, redis
        coverage: xdebug
    
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    
    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader --no-dev
    
    - name: Create database
      run: |
        mysql -h127.0.0.1 -uroot -proot_password -e "CREATE DATABASE IF NOT EXISTS sales_system_test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
    
    - name: Copy environment file
      run: cp .env.example .env
    
    - name: Set environment for testing
      run: |
        sed -i 's/DB_CONNECTION=sqlite/DB_CONNECTION=mysql/' .env
        sed -i 's/# DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
        sed -i 's/# DB_PORT=3306/DB_PORT=3306/' .env
        sed -i 's/# DB_DATABASE=laravel/DB_DATABASE=sales_system_test/' .env
        sed -i 's/# DB_USERNAME=root/DB_USERNAME=root/' .env
        sed -i 's/# DB_PASSWORD=/DB_PASSWORD=root_password/' .env
        sed -i 's/CACHE_STORE=database/CACHE_STORE=redis/' .env
        sed -i 's/QUEUE_CONNECTION=database/QUEUE_CONNECTION=redis/' .env
        sed -i 's/SESSION_DRIVER=database/SESSION_DRIVER=redis/' .env
    
    - name: Generate application key
      run: php artisan key:generate
    
    - name: Clear config cache
      run: php artisan config:clear
    
    - name: Run database migrations
      run: php artisan migrate --force
    
    - name: Run PHPStan static analysis
      run: ./vendor/bin/phpstan analyse --memory-limit=1G
    
    - name: Run Laravel Pint code style check
      run: ./vendor/bin/pint --test
    
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install NPM dependencies
      run: npm ci
    
    - name: Build assets
      run: npm run build
    
    - name: Run tests
      run: php artisan test --coverage --coverage-text
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: sales_system_test
        DB_USERNAME: root
        DB_PASSWORD: root_password

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could be rsync, SCP, or integration with your hosting provider

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # This should include proper zero-downtime deployment strategies